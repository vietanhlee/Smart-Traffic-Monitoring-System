import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  MessageCircle,
  Send,
  Bot,
  User,
  Loader2,
  Trash2,
  Copy,
  Check,
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "sonner";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeHighlight from "rehype-highlight";
import type { Components } from "react-markdown";
import { useWebSocket } from "@/hooks/useWebSocket";
import { endpoints } from "@/config";

interface VehicleData {
  count_car: number;
  count_motor: number;
  speed_car: number;
  speed_motor: number;
}

interface TrafficData {
  [roadName: string]: VehicleData;
}

interface Message {
  id: string;
  text: string;
  user: boolean;
  time: string;
  typing?: boolean;
  image?: string[];
}

interface ChatInterfaceProps {
  trafficData: TrafficData;
}
const STORAGE_KEY = "chat_history";

const ChatInterface = ({ trafficData }: ChatInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>(() => {
    // Kh·ªüi t·∫°o t·ª´ localStorage n·∫øu c√≥
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) {
      try {
        return JSON.parse(saved) as Message[];
      } catch {
        return [
          {
            id: "1",
            text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng giao th√¥ng th√¥ng minh. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ t√¨nh tr·∫°ng giao th√¥ng hi·ªán t·∫°i, th·ªëng k√™ xe c·ªô, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ c√°c tuy·∫øn ƒë∆∞·ªùng ƒëang ƒë∆∞·ª£c gi√°m s√°t. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            user: false,
            time: new Date().toLocaleTimeString("vi-VN"),
          },
        ];
      }
    }
    return [
      {
        id: "1",
        text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng giao th√¥ng th√¥ng minh. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ t√¨nh tr·∫°ng giao th√¥ng hi·ªán t·∫°i, th·ªëng k√™ xe c·ªô, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ c√°c tuy·∫øn ƒë∆∞·ªùng ƒëang ƒë∆∞·ª£c gi√°m s√°t. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
        user: false,
        time: new Date().toLocaleTimeString("vi-VN"),
      },
    ];
  });

  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [copiedMessageId, setCopiedMessageId] = useState<string | null>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // üëâ L∆∞u messages v√†o localStorage m·ªói khi thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(messages));
  }, [messages]);

  // Ki·ªÉm tra trafficData
  useEffect(() => {
    const hasData = trafficData && Object.keys(trafficData).length > 0;
    console.log("Traffic Data Status:", {
      hasData,
      roads: Object.keys(trafficData || {}),
      data: trafficData,
    });

    if (!hasData && messages.length === 1) {
      // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu l√† tin nh·∫Øn ch√†o ƒë·∫ßu ti√™n
      setMessages([
        {
          id: "1",
          text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng giao th√¥ng th√¥ng minh. Hi·ªán t·∫°i h·ªá th·ªëng ƒëang kh·ªüi ƒë·ªông v√† thu th·∫≠p d·ªØ li·ªáu giao th√¥ng. T√¥i s·∫Ω th√¥ng b√°o ngay khi c√≥ th√¥ng tin t·ª´ c√°c tuy·∫øn ƒë∆∞·ªùng.",
          user: false,
          time: new Date().toLocaleTimeString("vi-VN"),
        },
      ]);
    }
  }, [trafficData, messages.length]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  // T√¨m t√™n tuy·∫øn ƒë∆∞·ªùng t·ª´ c√¢u h·ªèi
  const findRequestedRoad = (question: string): string | null => {
    const roadNames = trafficData ? Object.keys(trafficData) : [];
    return (
      roadNames.find((road) =>
        question.toLowerCase().includes(road.toLowerCase())
      ) || null
    );
  };

  // Ph√¢n t√≠ch lo·∫°i c√¢u h·ªèi ƒë·ªÉ x·ª≠ l√Ω ph√π h·ª£p
  const analyzeQuestionType = (question: string): string => {
    const lowerQuestion = question.toLowerCase();

    if (
      lowerQuestion.includes("tuy·∫øn n√†o n√™n ƒëi") ||
      lowerQuestion.includes("ƒë∆∞·ªùng n√†o t·ªët") ||
      lowerQuestion.includes("n√™n ƒëi ƒë√¢u")
    ) {
      return "route_recommendation";
    }
    if (
      lowerQuestion.includes("tuy·∫øn n√†o t·∫Øc") ||
      lowerQuestion.includes("ƒë∆∞·ªùng n√†o t·∫Øc") ||
      lowerQuestion.includes("t·∫Øc nh·∫•t")
    ) {
      return "congestion_analysis";
    }
    if (
      lowerQuestion.includes("t√¨nh tr·∫°ng") ||
      lowerQuestion.includes("t√¨nh h√¨nh") ||
      lowerQuestion.includes("giao th√¥ng")
    ) {
      return "traffic_overview";
    }
    if (lowerQuestion.includes("t·ªëc ƒë·ªô") || lowerQuestion.includes("v·∫≠n t·ªëc")) {
      return "speed_analysis";
    }
    if (
      lowerQuestion.includes("c√≥ n√™n ƒëi") ||
      lowerQuestion.includes("ƒëi ƒë∆∞·ª£c kh√¥ng")
    ) {
      return "route_evaluation";
    }
    if (
      lowerQuestion.includes("so s√°nh") ||
      lowerQuestion.includes("kh√°c nhau")
    ) {
      return "comparison";
    }

    return "general";
  };

  const buildMonitoringInfo = (data: TrafficData) => {
    return Object.entries(data)
      .map(
        ([roadName, info]) =>
          `${roadName}: ${info.count_car} √¥ t√¥, ${
            info.count_motor
          } xe m√°y. V·∫≠n t·ªëc: ${info.speed_car.toFixed(1)} km/h`
      )
      .join("; ");
  };

  const buildSmartPrompt = (
    monitoringInfo: string,
    userMessage: string,
    questionType: string
  ) => {
    const baseData = `D·ªØ li·ªáu giao th√¥ng hi·ªán t·∫°i: ${monitoringInfo}`;

    switch (questionType) {
      case "route_recommendation":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë∆∞a ra khuy·∫øn ngh·ªã tuy·∫øn ƒë∆∞·ªùng t·ªët nh·∫•t d·ª±a tr√™n v·∫≠n t·ªëc v√† m·∫≠t ƒë·ªô xe. B·∫Øt ƒë·∫ßu b·∫±ng c√¢u tr·∫£ l·ªùi tr·ª±c ti·∫øp, sau ƒë√≥ gi·∫£i th√≠ch l√Ω do.`;

      case "congestion_analysis":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y x√°c ƒë·ªãnh tuy·∫øn ƒë∆∞·ªùng c√≥ t√¨nh tr·∫°ng t·∫Øc ngh·∫Ωn nh·∫•t d·ª±a tr√™n v·∫≠n t·ªëc v√† s·ªë l∆∞·ª£ng xe. ƒê∆∞a ra c√¢u tr·∫£ l·ªùi r√µ r√†ng v·ªÅ tuy·∫øn t·ªá nh·∫•t.`;

      case "traffic_overview":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y t√≥m t·∫Øt t√¨nh h√¨nh giao th√¥ng t·ªïng quan, kh√¥ng li·ªát k√™ chi ti·∫øt t·ª´ng tuy·∫øn. ƒê∆∞a ra nh·∫≠n x√©t chung v·ªÅ t√¨nh tr·∫°ng giao th√¥ng.`;

      case "speed_analysis":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y ph√¢n t√≠ch v√† so s√°nh t·ªëc ƒë·ªô gi·ªØa c√°c tuy·∫øn ƒë∆∞·ªùng. T√≠nh to√°n t·ªëc ƒë·ªô trung b√¨nh v√† ƒë∆∞a ra nh·∫≠n x√©t.`;

      case "route_evaluation":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y ƒë√°nh gi√° c·ª• th·ªÉ tuy·∫øn ƒë∆∞·ªùng ƒë∆∞·ª£c h·ªèi d·ª±a tr√™n d·ªØ li·ªáu. ƒê∆∞a ra l·ªùi khuy√™n c√≥ n√™n ƒëi hay kh√¥ng v√† l√Ω do.`;

      case "comparison":
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y so s√°nh c√°c tuy·∫øn ƒë∆∞·ªùng d·ª±a tr√™n d·ªØ li·ªáu. ƒê∆∞a ra b·∫£ng so s√°nh v√† k·∫øt lu·∫≠n.`;

      default:
        return `${baseData}\n\nNg∆∞·ªùi d√πng h·ªèi: "${userMessage}"\n\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch .`;
    }
  };

  const handleSendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    console.log("Sending message:", { message: userMessage }); // Log tin nh·∫Øn g·ª≠i ƒëi
    setInput("");
    setIsLoading(true);

    // Add user message
    const userMsg: Message = {
      id: Date.now().toString(),
      text: userMessage,
      user: true,
      time: new Date().toLocaleTimeString("vi-VN"),
    };
    setMessages((prev) => [...prev, userMsg]);

    // Add typing indicator
    const typingMsg: Message = {
      id: "typing",
      text: "",
      user: false,
      time: "",
      typing: true,
    };
    setMessages((prev) => [...prev, typingMsg]);

    try {
      if (!isWsConnected) {
        // Fallback response khi kh√¥ng c√≥ k·∫øt n·ªëi
        setMessages((prev) => {
          const filtered = prev.filter((msg) => msg.id !== "typing");
          return [
            ...filtered,
            {
              id: Date.now().toString(),
              text: "Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi m√°y ch·ªß. T√¥i s·∫Ω c·ªë g·∫Øng k·∫øt n·ªëi l·∫°i v√† tr·∫£ l·ªùi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.",
              user: false,
              time: new Date().toLocaleTimeString("vi-VN"),
            },
          ];
        });
        setIsLoading(false);
        throw new Error("WebSocket ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi");
      }

      // Ph√¢n t√≠ch lo·∫°i c√¢u h·ªèi v√† x√¢y d·ª±ng prompt th√¥ng minh
      const questionType = analyzeQuestionType(userMessage);
      let fullPrompt = userMessage;

      // Ki·ªÉm tra d·ªØ li·ªáu giao th√¥ng v√† tuy·∫øn ƒë∆∞·ªùng c·ª• th·ªÉ
      const requestedRoad = findRequestedRoad(userMessage);

      if (!trafficData || Object.keys(trafficData).length === 0) {
        fullPrompt =
          "Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng ƒëang kh·ªüi ƒë·ªông v√† ch∆∞a c√≥ d·ªØ li·ªáu giao th√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.";
      } else if (requestedRoad && !trafficData[requestedRoad]) {
        fullPrompt = `Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho tuy·∫øn ${requestedRoad}. C√°c tuy·∫øn ƒë∆∞·ªùng ƒëang ƒë∆∞·ª£c gi√°m s√°t l√†: ${Object.keys(
          trafficData
        ).join(", ")}.`;
      } else {
        const monitoringInfo = buildMonitoringInfo(trafficData);
        fullPrompt = buildSmartPrompt(
          monitoringInfo,
          userMessage,
          questionType
        );
      }

      const ok = chatSocketSend({ message: userMessage }); // G·ª≠i ƒë√∫ng format
      console.log("Message sent status:", ok);

      if (!ok) {
        throw new Error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn");
      }
    } catch (error) {
      console.error("Chat error:", error);

      // Remove typing indicator and add error message
      setMessages((prev) => {
        const filtered = prev.filter((msg) => msg.id !== "typing");
        return [
          ...filtered,
          {
            id: (Date.now() + 1).toString(),
            text: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.",
            user: false,
            time: new Date().toLocaleTimeString("vi-VN"),
          },
        ];
      });

      toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI");
      setIsLoading(false);
      inputRef.current?.focus();
    }
  };

  // Chat WebSocket
  const {
    data: chatData,
    send: chatSocketSend,
    isConnected: isWsConnected,
    error: wsError,
  } = useWebSocket(endpoints.chatWs);

  useEffect(() => {
    if (wsError) {
      console.error("WebSocket Error:", wsError);
      toast.error(`L·ªói k·∫øt n·ªëi: ${wsError}`);
    }
  }, [wsError]);

  // Monitor connection status
  useEffect(() => {
    console.log("WebSocket Connection Status:", isWsConnected);
  }, [isWsConnected]);

  useEffect(() => {
    if (!chatData) return;
    try {
      // Log to√†n b·ªô d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ WebSocket
      console.log("WebSocket Raw Response:", chatData);

      const responseText = chatData?.text as string | undefined;
      const responseImage = chatData?.image as string[] | undefined;

      // Log chi ti·∫øt t·ª´ng ph·∫ßn c·ªßa response
      console.log("Response Text:", responseText);
      console.log("Response Images:", responseImage);

      // N·∫øu c·∫£ text v√† image ƒë·ªÅu kh√¥ng t·ªìn t·∫°i -> b·ªè qua
      if (
        (!responseText || responseText === "") &&
        (!responseImage || responseImage.length === 0)
      ) {
        return;
      }

      // Use the image URLs directly as they are already properly formatted
      const imageUrls = responseImage || [];

      setMessages((prev) => {
        const filtered = prev.filter((msg) => msg.id !== "typing");
        const newMessage = {
          id: (Date.now() + 1).toString(),
          text: responseText ?? "", // cho ph√©p text r·ªóng n·∫øu ch·ªâ c√≥ ·∫£nh
          image: imageUrls, // Use URLs directly
          user: false,
          time: new Date().toLocaleTimeString("vi-VN"),
        };

        // Prevent adding exact duplicate (same text and same images) repeatedly
        const last = filtered[filtered.length - 1];
        const isDuplicate =
          last &&
          last.text === newMessage.text &&
          JSON.stringify(last.image || []) === JSON.stringify(newMessage.image);

        if (isDuplicate) {
          console.log("Duplicate message received ‚Äî skipping append.");
          return filtered;
        }

        console.log("Appending new message (text length, images):", {
          textLength: (newMessage.text || "").length,
          imageCount: newMessage.image.length,
        });

        return [...filtered, newMessage];
      });

      toast.success("ƒê√£ nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI");
    } catch (error) {
      console.error("Error processing WebSocket response:", error);
      toast.error("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi");
    }
    setIsLoading(false);
    inputRef.current?.focus();
  }, [chatData]);

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    const welcomeMsg: Message = {
      id: "1",
      text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng giao th√¥ng th√¥ng minh. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ t√¨nh tr·∫°ng giao th√¥ng hi·ªán t·∫°i, th·ªëng k√™ xe c·ªô, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ c√°c tuy·∫øn ƒë∆∞·ªùng ƒëang ƒë∆∞·ª£c gi√°m s√°t. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
      user: false,
      time: new Date().toLocaleTimeString("vi-VN"),
    };
    setMessages([welcomeMsg]);
    toast.success("ƒê√£ x√≥a l·ªãch s·ª≠ chat");
  };

  const copyMessage = async (text: string, messageId: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedMessageId(messageId);
      setTimeout(() => setCopiedMessageId(null), 2000);
      toast.success("ƒê√£ sao ch√©p tin nh·∫Øn");
    } catch {
      toast.error("Kh√¥ng th·ªÉ sao ch√©p tin nh·∫Øn");
    }
  };

  // Custom markdown components for styling
  const markdownComponents: Components = {
    p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
    strong: ({ children }) => (
      <strong className="font-semibold">{children}</strong>
    ),
    em: ({ children }) => <em className="italic">{children}</em>,
    ul: ({ children }) => (
      <ul className="list-disc list-inside mb-2 space-y-1">{children}</ul>
    ),
    ol: ({ children }) => (
      <ol className="list-decimal list-inside mb-2 space-y-1">{children}</ol>
    ),
    li: ({ children }) => <li className="ml-2">{children}</li>,
    code: ({ children, className }) => {
      const isInline = !className;
      return isInline ? (
        <code className="bg-gray-200 dark:bg-gray-700 px-1 py-0.5 rounded text-sm font-mono">
          {children}
        </code>
      ) : (
        <code className={className}>{children}</code>
      );
    },
    pre: ({ children }) => (
      <pre className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg overflow-x-auto mb-2 text-sm">
        {children}
      </pre>
    ),
    img: ({ src, alt }) => {
      if (!src) return null;

      // Log ƒë·ªÉ debug src
      console.log("Markdown Image src:", src);

      return (
        <img
          src={src} // Use URL directly as it's already properly formatted
          alt={alt || "AI generated image"}
          className="max-w-full h-auto rounded-lg shadow-lg mb-2"
          onError={(e) => {
            console.error("Markdown Image load error:", e);
            e.currentTarget.style.display = "none";
          }}
        />
      );
    },
    blockquote: ({ children }) => (
      <blockquote className="border-l-4 border-gray-300 dark:border-gray-600 pl-4 italic mb-2">
        {children}
      </blockquote>
    ),
    h1: ({ children }) => (
      <h1 className="text-lg font-bold mb-2">{children}</h1>
    ),
    h2: ({ children }) => (
      <h2 className="text-base font-bold mb-2">{children}</h2>
    ),
    h3: ({ children }) => (
      <h3 className="text-sm font-bold mb-1">{children}</h3>
    ),
    a: ({ children, href }) => (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-500 hover:text-blue-600 underline"
      >
        {children}
      </a>
    ),
  };

  return (
    <Card className="h-[600px] flex flex-col">
      <CardHeader className="flex-shrink-0">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center space-x-2">
            <MessageCircle className="h-5 w-5" />
            <span>Tr·ª£ L√Ω AI Giao Th√¥ng</span>
          </CardTitle>
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="text-xs">
              {messages.length - 1} tin nh·∫Øn
            </Badge>
            <Button
              variant="outline"
              size="sm"
              onClick={clearChat}
              disabled={messages.length <= 1}
            >
              <Trash2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col min-h-0">
        {/* Messages - Takes up remaining space */}
        <div className="flex-1 min-h-0 mb-4">
          <ScrollArea className="h-full pr-4" ref={scrollAreaRef}>
            <div className="space-y-4">
              <AnimatePresence>
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className={`flex ${
                      message.user ? "justify-end" : "justify-start"
                    }`}
                  >
                    <div
                      className={`flex items-start space-x-3 max-w-[80%] ${
                        message.user ? "flex-row-reverse space-x-reverse" : ""
                      }`}
                    >
                      <Avatar className="w-8 h-8">
                        <AvatarFallback
                          className={
                            message.user
                              ? "bg-blue-500 text-white"
                              : "bg-purple-500 text-white"
                          }
                        >
                          {message.user ? (
                            <User className="h-4 w-4" />
                          ) : (
                            <Bot className="h-4 w-4" />
                          )}
                        </AvatarFallback>
                      </Avatar>

                      <div
                        className={`rounded-lg p-3 ${
                          message.user
                            ? "bg-blue-500 text-white"
                            : "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100"
                        }`}
                      >
                        {message.image && message.image.length > 0 && (
                          <div className="mb-2">
                            {message.image.map((imgSrc, index) => (
                              <img
                                key={index}
                                src={imgSrc} // Use image URL directly
                                alt={`AI generated image ${index + 1}`}
                                className="max-w-full h-auto rounded-lg shadow-lg mb-2"
                                onError={(e) => {
                                  console.error(
                                    `Image ${index + 1} load error:`,
                                    e
                                  );
                                  e.currentTarget.style.display = "none";
                                  e.currentTarget.nextElementSibling =
                                    document.createElement("div");
                                  e.currentTarget.nextElementSibling.textContent =
                                    "Kh√¥ng th·ªÉ t·∫£i ·∫£nh";
                                  e.currentTarget.nextElementSibling.className =
                                    "text-red-500 text-sm";
                                }}
                              />
                            ))}
                          </div>
                        )}
                        {message.typing ? (
                          <div className="flex items-center space-x-1">
                            <div className="flex space-x-1">
                              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.1s" }}
                              ></div>
                              <div
                                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                style={{ animationDelay: "0.2s" }}
                              ></div>
                            </div>
                            <span className="text-sm text-gray-500 ml-2">
                              ƒêang tr·∫£ l·ªùi...
                            </span>
                          </div>
                        ) : (
                          <>
                            <div className="text-sm leading-relaxed">
                              <ReactMarkdown
                                remarkPlugins={[remarkGfm]}
                                rehypePlugins={[rehypeHighlight]}
                                components={markdownComponents}
                              >
                                {message.text}
                              </ReactMarkdown>
                            </div>
                            <div className="flex items-center justify-between mt-2">
                              <span
                                className={`text-xs ${
                                  message.user
                                    ? "text-blue-100"
                                    : "text-gray-500"
                                }`}
                              >
                                {message.time}
                              </span>
                              {!message.user && (
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-6 w-6 p-0"
                                  onClick={() =>
                                    copyMessage(message.text, message.id)
                                  }
                                >
                                  {copiedMessageId === message.id ? (
                                    <Check className="h-3 w-3" />
                                  ) : (
                                    <Copy className="h-3 w-3" />
                                  )}
                                </Button>
                              )}
                            </div>
                          </>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          </ScrollArea>
        </div>

        {/* Input - Fixed at bottom */}
        <div className="flex-shrink-0 flex space-x-2 pt-2 border-t border-gray-200 dark:border-gray-700">
          <Input
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="H·ªèi v·ªÅ t√¨nh tr·∫°ng giao th√¥ng..."
            disabled={isLoading}
            className="flex-1"
          />
          <Button
            onClick={handleSendMessage}
            disabled={!input.trim() || isLoading}
            size="icon"
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Send className="h-4 w-4" />
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ChatInterface;
