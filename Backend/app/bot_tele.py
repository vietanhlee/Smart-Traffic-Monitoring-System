from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import requests
import logging
from io import BytesIO
from core.config import settings_network
from dotenv import load_dotenv
load_dotenv()
import os

API_URL = f"{settings_network.BASE_URL_API}/api/v1/chat_no_auth"
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Xin ch√†o! H√£y g·ª≠i tin nh·∫Øn ƒë·ªÉ t√¥i tr·∫£ l·ªùi b·∫°n üòä")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    
    try:
        # G·ª≠i t·ªõi API backend
        res = requests.post(API_URL, json={"message": user_text}, timeout=30)
        data = res.json()
        
        # G·ª≠i text tr·∫£ l·ªùi
        if "message" in data:
            await update.message.reply_text(data["message"])
        
        # G·ª≠i c√°c ·∫£nh tr·∫£ v·ªÅ (n·∫øu c√≥)
        if "image" in data and isinstance(data["image"], list):
            for img_url in data["image"]:
                try:
                    # Fetch ·∫£nh t·ª´ URL (API tr·∫£ v·ªÅ binary)
                    img_response = requests.get(img_url, timeout=10)
                    
                    if img_response.status_code == 200:
                        # Chuy·ªÉn bytes th√†nh file object
                        img_bytes = BytesIO(img_response.content)
                        img_bytes.name = 'image.jpg'
                        
                        # G·ª≠i ·∫£nh
                        await update.message.reply_photo(photo=img_bytes)
                    else:
                        await update.message.reply_text(f"‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´: {img_url}")
                        
                except Exception as img_err:
                    logging.error(f"L·ªói khi t·∫£i ·∫£nh: {img_err}")
                    await update.message.reply_text(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(img_err)}")
                    
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚è±Ô∏è API ph·∫£n h·ªìi qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i!")
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"‚ùå L·ªói k·∫øt n·ªëi API: {str(e)}")
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        await update.message.reply_text(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()